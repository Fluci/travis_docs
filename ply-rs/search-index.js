var searchIndex = {};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for `BigEndian`.",null,null],[6,"LE","","A type alias for `LittleEndian`.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"new","","Creates a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"key","","Returns the entry key",0,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",8,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",9,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["ply_rs"] = {"doc":"Library for reading/writing ascii and binary PLY files.","items":[[0,"parser","ply_rs","Reads ascii or binary data into a `Ply`.",null,null],[3,"Parser","ply_rs::parser","Reads data given by a `Read` trait into `Ply` components.",null,null],[11,"new","","Creates a new `Parser<E>`, where `E` is the type to store the element data in.",0,{"inputs":[],"output":{"name":"self"}}],[11,"read_ply","","Expects the complete content of a PLY file.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"read_header","","Reads header until and inclusive `end_header`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"read_header_line","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"read_payload","","Reads payload. Encoding is chosen according to the encoding field in `header`.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"header"}],"output":{"name":"result"}}],[11,"read_payload_for_element","","Reads entire list of elements from payload. Encoding is chosen according to `header`.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"elementdef"},{"name":"header"}],"output":{"name":"result"}}],[11,"read_ascii_element","","Read a single element. Assume it is encoded in ascii.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"elementdef"}],"output":{"name":"result"}}],[11,"read_big_endian_element","","Reads a single element as declared in èlement_def. Assumes big endian encoding.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"elementdef"}],"output":{"name":"result"}}],[11,"read_little_endian_element","","Reads a single element as declared in èlement_def. Assumes big endian encoding.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"elementdef"}],"output":{"name":"result"}}],[0,"ply","ply_rs","Definitions used to model PLY files.",null,null],[3,"ConsistencyError","ply_rs::ply","Contains a description, why a given `Ply` object isn't consistent and could not be made consistent.",null,null],[3,"Ply","","Models all necessary information to interact with a PLY file.",null,null],[12,"header","","All header information found in a PLY file.",1,null],[12,"payload","","The payloud found after the `end_header` line in a PLY file.",1,null],[3,"Header","","Models the header of a PLY file.",null,null],[12,"encoding","","In which format is the payload encoded?",2,null],[12,"version","","Which file format standard is used?",2,null],[12,"obj_infos","","",2,null],[12,"elements","","Ordered map of elements as they appear in the payload.",2,null],[12,"comments","","File comments.",2,null],[3,"Version","","Models a version number.",null,null],[12,"major","","",3,null],[12,"minor","","",3,null],[3,"ElementDef","","Models the definition of an element.",null,null],[12,"name","","Name of the element.",4,null],[12,"count","","Describes, how many elements appear in a PLY file.",4,null],[12,"properties","","An element is modeled by multiple properties, those are named values or lists.",4,null],[3,"PropertyDef","","Defines a property of an element.",null,null],[12,"name","","Unique name of property.",5,null],[12,"data_type","","Data type of the property: You can have simple scalars (ints, floats, etc.) or lists of scalars. In the case of lists you need to decide in which type you want to store the list length and what type to use for the list elemetns.",5,null],[4,"Encoding","","Models possible encoding standards for the payload.",null,null],[13,"Ascii","","Write numbers in their ascii representation (e.g. -13, 6.28, etc.). Properties are separated by spaces and elements are separated by line breaks.",6,null],[13,"BinaryBigEndian","","Encode payload using big endian.",6,null],[13,"BinaryLittleEndian","","Encode payload using little endian.",6,null],[4,"ScalarType","","Scalar type used to encode properties in the payload.",null,null],[13,"Char","","Signed 8 bit integer, rust: `i8`.",7,null],[13,"UChar","","Unsigned 8 bit integer, rust: `u8`.",7,null],[13,"Short","","Signed 16 bit integer, rust: `i16`.",7,null],[13,"UShort","","Unsigned 16 bit integer, rust: `u16`.",7,null],[13,"Int","","Signed 32 bit integer, rust: `i32`.",7,null],[13,"UInt","","Unsigned 32 bit integer, rust: `u32`.",7,null],[13,"Float","","32 bit floating point number, rust: `f32`.",7,null],[13,"Double","","64 bit floating point number, rust: `f64`.",7,null],[4,"PropertyType","","Data type used to encode properties in the payload.",null,null],[13,"Scalar","","Simple, \"one-number\" type.",8,null],[13,"List","","Defines a sequence of scalars with the same type.",8,null],[4,"Property","","Wrapper used to implement a dynamic type system as required by the PLY file format.",null,null],[13,"Char","","",9,null],[13,"UChar","","",9,null],[13,"Short","","",9,null],[13,"UShort","","",9,null],[13,"Int","","",9,null],[13,"UInt","","",9,null],[13,"Float","","",9,null],[13,"Double","","",9,null],[13,"ListChar","","",9,null],[13,"ListUChar","","",9,null],[13,"ListShort","","",9,null],[13,"ListUShort","","",9,null],[13,"ListInt","","",9,null],[13,"ListUInt","","",9,null],[13,"ListFloat","","",9,null],[13,"ListDouble","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new error object with a given description of the problem.",10,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"make_consistent","","Takes a mutable `Ply` object, performs common operations to make it consistent,",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_key","","",4,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_key","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"ply"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"ply"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"ply"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Ply<E>`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"header"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"header"}}],[11,"new","","Constructs an empty `Header` using Ascii encoding and version 1.0. No object informations, elements or comments are set.",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"encoding"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"elementdef"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"elementdef"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"elementdef"}}],[11,"new","","Creates a new element definition.",4,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"propertydef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"propertydef"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"propertydef"}}],[11,"new","","Creates a new property definition.",5,{"inputs":[{"name":"string"},{"name":"propertytype"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"scalartype"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"scalartype"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"propertytype"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"propertytype"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"propertytype"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"property"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"property"}}],[6,"DefaultElement","","Ready to use data-structure for all kind of element definitions.",null,null],[6,"KeyMap","","Alias to reduce coupling with `LinkedHashMap`",null,null],[6,"ObjInfo","","Alias to give object informations an explicit type.",null,null],[6,"Comment","","Alias to give comments an explicit type.",null,null],[6,"Payload","","The part after `end_header`, contains the main data.",null,null],[8,"Addable","","Convenience trait to assure consistency between map key and name attribute of stored element.",null,null],[10,"add","","Takes a value that provides a key and stores it under the given key.",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[8,"Key","","Convenience trait to assure consistency between the key used for storage and the name of the elment.",null,null],[10,"get_key","","Returns a key under which the element should be stored in a key-value store.",12,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"PropertyAccess","","Provides setters and getters for the Parser and the Writer.",null,null],[10,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"set_property","","",13,{"inputs":[{"name":"self"},{"name":"string"},{"name":"property"}],"output":null}],[11,"get_char","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_uchar","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_short","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_ushort","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_int","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_uint","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_float","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_double","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_char","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_uchar","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_short","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_ushort","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_int","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_uint","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_float","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_double","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[0,"writer","ply_rs","Writes ascii or binary data from a `Ply` to a `Write` trait.",null,null],[3,"Writer","ply_rs::writer","Writes a `Ply` to a `Write` trait.",null,null],[11,"new","","Create a new `Writer<E>` where `E` is the element type. To get started quickly use `DefaultElement`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"write_ply","","Writes an entire PLY file modeled by `ply` to `out`, performs consistency chekc.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ply"}],"output":{"name":"result"}}],[11,"write_ply_unchecked","","Writes an entire PLY file modeled by `ply` to `out`, performes no consistency check.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ply"}],"output":{"name":"result"}}],[11,"write_line_magic_number","","Writes the magic number \"ply\" and a new line.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"write_line_format","","Writes \"format  \".",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"encoding"},{"name":"version"}],"output":{"name":"result"}}],[11,"write_line_comment","","Writes a comment line.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"comment"}],"output":{"name":"result"}}],[11,"write_line_obj_info","","Writes an object information line.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"objinfo"}],"output":{"name":"result"}}],[11,"write_line_element_definition","","Writes an element line from the header: \"element  \"",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"elementdef"}],"output":{"name":"result"}}],[11,"write_line_property_definition","","Writes a property line form the header: \"property [list <index_type> <scalar_type> | <scalar_type> ]\"",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"propertydef"}],"output":{"name":"result"}}],[11,"write_element_definition","","Writes the element line and all the property definitions",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"elementdef"}],"output":{"name":"result"}}],[11,"write_line_end_header","","Writes `end_header\\n`. This terminates the header. Each following byte belongs to the payload.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"write_header","","Convenience method to write all header elements.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"header"}],"output":{"name":"result"}}],[11,"write_payload","","Writes the payload of a `ply` (`ply.playload`).",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"payload"},{"name":"header"}],"output":{"name":"result"}}],[11,"write_payload_of_element","","Write all elments as stored in the `element_list`.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"vec"},{"name":"elementdef"},{"name":"header"}],"output":{"name":"result"}}],[11,"write_ascii_element","","Write a single ascii formatted element.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"e"},{"name":"elementdef"}],"output":{"name":"result"}}],[11,"write_big_endian_element","","Write a single binary formatted element in big endian.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"e"},{"name":"elementdef"}],"output":{"name":"result"}}],[11,"write_little_endian_element","","Write a single binary formatted element in little endian.",14,{"inputs":[{"name":"self"},{"name":"t"},{"name":"e"},{"name":"elementdef"}],"output":{"name":"result"}}],[11,"new","ply_rs::ply","",15,{"inputs":[],"output":{"name":"self"}}],[11,"set_property","","",15,{"inputs":[{"name":"self"},{"name":"string"},{"name":"property"}],"output":null}],[11,"get_char","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_uchar","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_short","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_ushort","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_int","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_uint","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_float","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_double","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_char","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_uchar","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_short","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_ushort","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_int","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_uint","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_float","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_double","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"add","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"set_property","","",13,{"inputs":[{"name":"self"},{"name":"string"},{"name":"property"}],"output":null}],[11,"get_char","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_uchar","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_short","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_ushort","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_int","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_uint","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_float","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_double","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_char","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_uchar","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_short","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_ushort","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_int","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_uint","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_float","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}],[11,"get_list_double","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"option"}}]],"paths":[[3,"Parser"],[3,"Ply"],[3,"Header"],[3,"Version"],[3,"ElementDef"],[3,"PropertyDef"],[4,"Encoding"],[4,"ScalarType"],[4,"PropertyType"],[4,"Property"],[3,"ConsistencyError"],[8,"Addable"],[8,"Key"],[8,"PropertyAccess"],[3,"Writer"],[6,"DefaultElement"],[6,"KeyMap"]]};
initSearch(searchIndex);
